{"componentChunkName":"component---src-pages-posts-dato-cms-project-slug-js","path":"/posts/logic-analyzer/","result":{"data":{"datoCmsProject":{"title":"Logic Analyzer","text":"![](https://www.datocms-assets.com/53201/1628177472-img4476-edited.png)\n\n## Overview\nThis is technically a logic analyzer. It analyzes logic in order to extract information. However, in practice it is more of a \"baud rate detector.\"\n\nSo at one point I was opening up some electronic device (I don't remember what) and I wanted to connect the UART on the board to my laptop. I didn't know the baud rate though. So rather than spending an hour at most figuring it out through trial and error, I decided to spend much more time making a device that would figure out the baud rate for me. \n\nThe first iteration used the number of voltage changes per second in order to calculate the baud rate. Unfortunately this meant that it only worked when the bytes being sent were `01010101` or `10101010`. This got me close enough to the actual baud rate (since there are only so many that are common) that I was able to connect to the device through, so it worked well enough for me.\n\nBut it could be better. What if in the future I wanted to know the exact baud rate of something that used a nonstandard baud rate? And so I planned out a second iteration. This iteration would look for the smallest distance between two voltage changes on the data line and calculate the baud rate solely on that. That would make it so that as long as there was some sequence of `010` or `101` it would be able to calculate the baud rate, which is pretty likely if you sample over multiple bits. I haven't gotten around to implementing this yet, however it should work on the current hardware.\n\nBoth the firmware, schematics, and KiCad files can be found [here](https://github.com/WheatleyTheCore/Logic-Analyzer)\n\n## Tech Used\n\nThis project was built around the [MC9S08SH8](https://www.nxp.com/docs/en/data-sheet/MC9S08SH8.pdf) microprocessor. This 8-bit microprocessor was more than powerful enough for this project, and using an external clock it was also precise enough.\n\nFor programming and development I used NXP's [Codewarrior](https://www.nxp.com/design/software/development-software/codewarrior-development-tools:CW_HOME) platform with Processor Expert. \n\nThe design of the PCB for the project was done in [KiCad](https://www.kicad.org/), which I had fabricated by [OSH Park](https://oshpark.com/).\n\n## What I learned\n\nThis project has been (at the time of writing this) the largest learning experience I think I've had. Prior to this I had never done anything with PCB design or fabrication, external interrupts on microprocessors, used things like external oscillators, or have to think about uber-precise timing in code. \n\nHaving completed it I now have an at least adequete understanding of these things, and am definitely a much more competent programmer in Embedded C.","datePublished":"2021-08-05"}},"pageContext":{"id":"DatoCmsProject-50990852-en","slug":"logic-analyzer","__params":{"slug":"logic-analyzer"}}},"staticQueryHashes":[]}